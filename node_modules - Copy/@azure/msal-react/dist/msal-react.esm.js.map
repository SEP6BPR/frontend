{"version":3,"file":"msal-react.esm.js","sources":["../src/MsalContext.ts","../src/utils/utilities.ts","../src/packageMetadata.ts","../src/MsalProvider.tsx","../src/hooks/useMsal.ts","../src/hooks/useAccount.ts","../src/hooks/useIsAuthenticated.ts","../src/components/AuthenticatedTemplate.tsx","../src/components/UnauthenticatedTemplate.tsx","../src/hooks/useMsalAuthentication.ts","../src/components/MsalAuthenticationTemplate.tsx","../src/components/withMsal.tsx"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as React from \"react\";\nimport { IPublicClientApplication, stubbedPublicClientApplication, Logger, InteractionStatus, AccountInfo } from \"@azure/msal-browser\";\n\nexport interface IMsalContext {\n    instance: IPublicClientApplication;\n    inProgress: InteractionStatus;\n    accounts: AccountInfo[];\n    logger: Logger;\n}\n\n/*\n * Stubbed context implementation\n * Only used when there is no provider, which is an unsupported scenario\n */\nconst defaultMsalContext: IMsalContext = {\n    instance: stubbedPublicClientApplication,\n    inProgress: InteractionStatus.None,\n    accounts: [],\n    logger: new Logger({})\n};\n\nexport const MsalContext = React.createContext<IMsalContext>(\n    defaultMsalContext\n);\nexport const MsalConsumer = MsalContext.Consumer;\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\n\ntype FaaCFunction = <T>(args: T) => React.ReactNode;\n\nexport function getChildrenOrFunction<T>(\n    children: React.ReactNode | FaaCFunction,\n    args: T\n): React.ReactNode {\n    if (typeof children === \"function\") {\n        return children(args);\n    }\n    return children;\n}\n\n/*\n * Utility types\n * Reference: https://github.com/piotrwitek/utility-types\n */\ntype SetDifference<A, B> = A extends B ? never : A;\ntype SetComplement<A, A1 extends A> = SetDifference<A, A1>;\nexport type Subtract<T extends T1, T1 extends object> = Pick<T,SetComplement<keyof T, keyof T1>>;\n\n/**\n * Helper function to determine whether 2 arrays are equal\n * Used to avoid unnecessary state updates\n * @param arrayA \n * @param arrayB \n */\nexport function accountArraysAreEqual(arrayA: Array<AccountIdentifiers>, arrayB: Array<AccountIdentifiers>): boolean {\n    if (arrayA.length !== arrayB.length) {\n        return false;\n    }\n\n    const comparisonArray = [...arrayB];\n\n    return arrayA.every((elementA) => {\n        const elementB = comparisonArray.shift();\n        if (!elementA || !elementB) {\n            return false;\n        }\n\n        return (elementA.homeAccountId === elementB.homeAccountId) && \n               (elementA.localAccountId === elementB.localAccountId) &&\n               (elementA.username === elementB.username);\n    });\n}\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-react\";\nexport const version = \"1.1.1\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { useState, useEffect, useRef, PropsWithChildren, useMemo } from \"react\";\nimport {\n    IPublicClientApplication,\n    EventType,\n    EventMessage,\n    EventMessageUtils,\n    InteractionStatus,\n    Logger,\n    WrapperSKU,\n    AccountInfo\n} from \"@azure/msal-browser\";\nimport { MsalContext, IMsalContext } from \"./MsalContext\";\nimport { accountArraysAreEqual } from \"./utils/utilities\";\nimport { name as SKU, version } from \"./packageMetadata\";\n\nexport type MsalProviderProps = PropsWithChildren<{\n    instance: IPublicClientApplication;\n}>;\n\nexport function MsalProvider({instance, children}: MsalProviderProps): React.ReactElement {\n    useEffect(() => {\n        instance.initializeWrapperLibrary(WrapperSKU.React, version);\n    }, [instance]);\n    // Create a logger instance for msal-react with the same options as PublicClientApplication\n    const logger: Logger = useMemo(() => {\n        return instance.getLogger().clone(SKU, version);\n    }, [instance]);\n\n    // State hook to store accounts\n    const [accounts, setAccounts] = useState<AccountInfo[]>([]);\n    // State hook to store in progress value\n    const [inProgress, setInProgress] = useState<InteractionStatus>(InteractionStatus.Startup);\n    // Mutable object used in the event callback\n    const inProgressRef = useRef(inProgress);\n    \n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\n            switch (message.eventType) {\n                case EventType.ACCOUNT_ADDED:\n                case EventType.ACCOUNT_REMOVED:\n                case EventType.LOGIN_SUCCESS:\n                case EventType.SSO_SILENT_SUCCESS:\n                case EventType.HANDLE_REDIRECT_END:\n                case EventType.LOGIN_FAILURE:\n                case EventType.SSO_SILENT_FAILURE:\n                case EventType.LOGOUT_END:\n                case EventType.ACQUIRE_TOKEN_SUCCESS:\n                case EventType.ACQUIRE_TOKEN_FAILURE:\n                    const currentAccounts = instance.getAllAccounts();\n                    if (!accountArraysAreEqual(currentAccounts, accounts)) {\n                        logger.info(\"MsalProvider - updating account state\");\n                        setAccounts(currentAccounts);\n                    } else {\n                        logger.info(\"MsalProvider - no account changes\");\n                    }\n                    break;\n            }\n        });\n        logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n\n        return () => {\n            // Remove callback when component unmounts or accounts change\n            if (callbackId) {\n                logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, accounts, logger]);\n\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message, inProgressRef.current);\n            if (status !== null) {\n                logger.info(`MsalProvider - ${message.eventType} results in setting inProgress from ${inProgressRef.current} to ${status}`);\n                inProgressRef.current = status;\n                setInProgress(status);\n            }\n        });\n        logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n\n        instance.handleRedirectPromise().catch(() => {\n            // Errors should be handled by listening to the LOGIN_FAILURE event\n            return;\n        });\n\n        return () => {\n            if (callbackId) {\n                logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, logger]);\n\n    const contextValue: IMsalContext = {\n        instance,\n        inProgress,\n        accounts,\n        logger\n    };\n\n    return (\n        <MsalContext.Provider value={contextValue}>\n            {children}\n        </MsalContext.Provider>\n    );\n}\n\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useContext } from \"react\";\nimport { IMsalContext, MsalContext } from \"../MsalContext\";\n\n/**\n * Returns Msal Context values\n */\nexport const useMsal = (): IMsalContext => useContext(MsalContext);\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useState, useEffect } from \"react\";\nimport { AccountInfo, IPublicClientApplication, InteractionStatus, AccountEntity } from \"@azure/msal-browser\";\nimport { useMsal } from \"./useMsal\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\n\nfunction getAccount(instance: IPublicClientApplication, accountIdentifiers: AccountIdentifiers): AccountInfo | null {\n    const allAccounts = instance.getAllAccounts();\n    if (allAccounts.length > 0 && (accountIdentifiers.homeAccountId || accountIdentifiers.localAccountId || accountIdentifiers.username)) {\n        const matchedAccounts = allAccounts.filter(accountObj => {\n            if (accountIdentifiers.username && accountIdentifiers.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.homeAccountId && accountIdentifiers.homeAccountId.toLowerCase() !== accountObj.homeAccountId.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.localAccountId && accountIdentifiers.localAccountId.toLowerCase() !== accountObj.localAccountId.toLowerCase()) {\n                return false;\n            }\n\n            return true;\n        });\n\n        return matchedAccounts[0] || null;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\n * @param accountIdentifiers \n */\nexport function useAccount(accountIdentifiers: AccountIdentifiers): AccountInfo | null {\n    const { instance, inProgress } = useMsal();\n\n    const initialStateValue = inProgress === InteractionStatus.Startup ? null : getAccount(instance, accountIdentifiers);\n    const [account, setAccount] = useState<AccountInfo|null>(initialStateValue);\n\n    useEffect(() => {\n        const currentAccount = getAccount(instance, accountIdentifiers);\n        if (!AccountEntity.accountInfoIsEqual(account, currentAccount, true)) {\n            setAccount(currentAccount);\n        }\n    }, [inProgress, accountIdentifiers, instance, account]);\n\n    return account;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useState, useEffect } from \"react\";\nimport { useMsal } from \"./useMsal\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { useAccount } from \"./useAccount\";\nimport { AccountInfo, InteractionStatus } from \"@azure/msal-browser\";\n\nfunction isAuthenticated(allAccounts: AccountIdentifiers[], account: AccountInfo | null, matchAccount?: AccountIdentifiers): boolean {\n    if(matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {\n        return !!account;\n    }   \n\n    return allAccounts.length > 0;\n}\n\n/**\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\n * @param matchAccount \n */\nexport function useIsAuthenticated(matchAccount?: AccountIdentifiers): boolean {\n    const { accounts: allAccounts, inProgress } = useMsal();\n    const account = useAccount(matchAccount || {});\n\n    const initialStateValue = inProgress === InteractionStatus.Startup ? false : isAuthenticated(allAccounts, account, matchAccount);\n    const [hasAuthenticated, setHasAuthenticated] = useState<boolean>(initialStateValue);\n\n    useEffect(() => {\n        setHasAuthenticated(isAuthenticated(allAccounts, account, matchAccount));\n    }, [allAccounts, account, matchAccount]);\n\n    return hasAuthenticated;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nexport type AuthenticatedTemplateProps = PropsWithChildren<AccountIdentifiers>;\n\n/**\n * Renders child components if user is authenticated\n * @param props \n */\nexport function AuthenticatedTemplate({ username, homeAccountId, localAccountId, children }: AuthenticatedTemplateProps): React.ReactElement|null {\n    const context = useMsal();\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (isAuthenticated && context.inProgress !== InteractionStatus.Startup) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, context)}\n            </React.Fragment>\n        );\n    }\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nexport type UnauthenticatedTemplateProps = PropsWithChildren<AccountIdentifiers>;\n\n/**\n * Renders child components if user is unauthenticated\n * @param props \n */\nexport function UnauthenticatedTemplate({ username, homeAccountId, localAccountId, children }: UnauthenticatedTemplateProps): React.ReactElement|null {\n    const context = useMsal();\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (!isAuthenticated && context.inProgress !== InteractionStatus.Startup && context.inProgress !== InteractionStatus.HandleRedirect) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, context)}\n            </React.Fragment>\n        );\n    }\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { PopupRequest, RedirectRequest, SsoSilentRequest, InteractionType, AuthenticationResult, AuthError, EventMessage, EventType, InteractionStatus } from \"@azure/msal-browser\";\nimport { useIsAuthenticated } from \"./useIsAuthenticated\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { useMsal } from \"./useMsal\";\n\nexport type MsalAuthenticationResult = {\n    login: Function; \n    result: AuthenticationResult|null;\n    error: AuthError|null;\n};\n\n/**\n * Invokes a login call if a user is not currently signed-in. Failed logins can be retried using the login callback returned.\n * Optionally provide a request object to be used in the login call.\n * Optionally provide a specific user that should be logged in.\n * @param interactionType \n * @param authenticationRequest \n * @param accountIdentifiers \n */\nexport function useMsalAuthentication(\n    interactionType: InteractionType, \n    authenticationRequest?: PopupRequest|RedirectRequest|SsoSilentRequest, \n    accountIdentifiers?: AccountIdentifiers\n): MsalAuthenticationResult {\n    const { instance, inProgress, logger } = useMsal();\n    const isAuthenticated = useIsAuthenticated(accountIdentifiers);\n    const [[result, error], setResponse] = useState<[AuthenticationResult|null, AuthError|null]>([null, null]);\n    const [hasBeenCalled, setHasBeenCalled] = useState<boolean>(false);\n\n    const login = useCallback(async (callbackInteractionType?: InteractionType, callbackRequest?: PopupRequest|RedirectRequest|SsoSilentRequest): Promise<AuthenticationResult|null> => {\n        const loginType = callbackInteractionType || interactionType;\n        const loginRequest = callbackRequest || authenticationRequest;\n        switch (loginType) {\n            case InteractionType.Popup:\n                logger.verbose(\"useMsalAuthentication - Calling loginPopup\");\n                return instance.loginPopup(loginRequest as PopupRequest);\n            case InteractionType.Redirect:\n                // This promise is not expected to resolve due to full frame redirect\n                logger.verbose(\"useMsalAuthentication - Calling loginRedirect\");\n                return instance.loginRedirect(loginRequest as RedirectRequest).then(null);\n            case InteractionType.Silent:\n                logger.verbose(\"useMsalAuthentication - Calling ssoSilent\");\n                return instance.ssoSilent(loginRequest as SsoSilentRequest);\n            default:\n                throw \"Invalid interaction type provided.\";\n        }\n    }, [instance, interactionType, authenticationRequest, logger]);\n\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\n            switch(message.eventType) {\n                case EventType.LOGIN_SUCCESS:\n                case EventType.SSO_SILENT_SUCCESS:\n                    if (message.payload) {\n                        setResponse([message.payload as AuthenticationResult, null]);\n                    }\n                    break;\n                case EventType.LOGIN_FAILURE:\n                case EventType.SSO_SILENT_FAILURE:\n                    if (message.error) {\n                        setResponse([null, message.error as AuthError]);\n                    }\n                    break;\n            }\n        });\n        logger.verbose(`useMsalAuthentication - Registered event callback with id: ${callbackId}`);\n\n        return () => {\n            if (callbackId) {\n                logger.verbose(`useMsalAuthentication - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, logger]);\n\n    useEffect(() => {\n        if (!hasBeenCalled && !error && !isAuthenticated && inProgress === InteractionStatus.None) {\n            logger.info(\"useMsalAuthentication - No user is authenticated, attempting to login\");\n            // Ensure login is only called one time from within this hook, any subsequent login attempts should use the callback returned\n            setHasBeenCalled(true);\n            login().catch(() => {\n                // Errors are handled by the event handler above\n                return;\n            });\n        }\n    }, [isAuthenticated, inProgress, error, hasBeenCalled, login, logger]);\n\n    return { login, result, error };\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { MsalAuthenticationResult, useMsalAuthentication } from \"../hooks/useMsalAuthentication\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { InteractionType, PopupRequest, RedirectRequest, SsoSilentRequest, InteractionStatus } from \"@azure/msal-browser\";\nimport { IMsalContext } from \"../MsalContext\";\n\nexport type MsalAuthenticationProps = PropsWithChildren<AccountIdentifiers & {\n    interactionType: InteractionType;\n    authenticationRequest?: PopupRequest|RedirectRequest|SsoSilentRequest;\n    loadingComponent?: React.ElementType<IMsalContext>;\n    errorComponent?: React.ElementType<MsalAuthenticationResult>;\n}>;\n\n/**\n * Attempts to authenticate user if not already authenticated, then renders child components\n * @param props\n */\nexport function MsalAuthenticationTemplate({ \n    interactionType, \n    username, \n    homeAccountId, \n    localAccountId,\n    authenticationRequest, \n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    children \n}: MsalAuthenticationProps): React.ReactElement|null {\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const context = useMsal();\n    const msalAuthResult = useMsalAuthentication(interactionType, authenticationRequest, accountIdentifier);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (msalAuthResult.error && context.inProgress === InteractionStatus.None) {\n        if (!!ErrorComponent) {\n            return <ErrorComponent {...msalAuthResult} />;\n        }\n\n        throw msalAuthResult.error;\n    }\n    \n    if (isAuthenticated) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, msalAuthResult)}\n            </React.Fragment>\n        );\n    } \n    \n    if (!!LoadingComponent && context.inProgress !== InteractionStatus.None) {\n        return <LoadingComponent {...context} />;\n    }\n\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React from \"react\";\nimport { IMsalContext } from \"../MsalContext\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { Subtract } from \"../utils/utilities\";\n\nexport type WithMsalProps = {\n    msalContext: IMsalContext;\n};\n\n/**\n * Higher order component wraps provided component with msal by injecting msal context values into the component's props \n * @param Component \n */\nexport const withMsal = <P extends WithMsalProps>(Component: React.ComponentType<P>): React.FunctionComponent<Subtract<P,WithMsalProps>> => {\n    const ComponentWithMsal: React.FunctionComponent<Subtract<P,WithMsalProps>> = props => {\n        const msal = useMsal();\n        return <Component {...(props as P)} msalContext={msal} />;\n    };\n\n    const componentName =\n        Component.displayName || Component.name || \"Component\";\n    ComponentWithMsal.displayName = `withMsal(${componentName})`;\n\n    return ComponentWithMsal;\n};\n"],"names":["defaultMsalContext","instance","stubbedPublicClientApplication","inProgress","InteractionStatus","None","accounts","logger","Logger","MsalContext","React","MsalConsumer","Consumer","getChildrenOrFunction","children","args","accountArraysAreEqual","arrayA","arrayB","length","comparisonArray","every","elementA","elementB","shift","homeAccountId","localAccountId","username","name","version","MsalProvider","useEffect","initializeWrapperLibrary","WrapperSKU","useMemo","getLogger","clone","SKU","setAccounts","useState","setInProgress","Startup","inProgressRef","useRef","callbackId","addEventCallback","message","eventType","EventType","ACCOUNT_ADDED","ACCOUNT_REMOVED","LOGIN_SUCCESS","SSO_SILENT_SUCCESS","HANDLE_REDIRECT_END","LOGIN_FAILURE","SSO_SILENT_FAILURE","LOGOUT_END","ACQUIRE_TOKEN_SUCCESS","ACQUIRE_TOKEN_FAILURE","currentAccounts","getAllAccounts","info","verbose","removeEventCallback","status","EventMessageUtils","getInteractionStatusFromEvent","current","handleRedirectPromise","catch","contextValue","Provider","value","useMsal","useContext","getAccount","accountIdentifiers","allAccounts","matchedAccounts","filter","accountObj","toLowerCase","useAccount","initialStateValue","account","setAccount","currentAccount","AccountEntity","accountInfoIsEqual","isAuthenticated","matchAccount","useIsAuthenticated","hasAuthenticated","setHasAuthenticated","AuthenticatedTemplate","context","accountIdentifier","Fragment","UnauthenticatedTemplate","HandleRedirect","useMsalAuthentication","interactionType","authenticationRequest","result","error","setResponse","hasBeenCalled","setHasBeenCalled","login","useCallback","callbackInteractionType","callbackRequest","loginType","loginRequest","InteractionType","Popup","loginPopup","Redirect","loginRedirect","then","Silent","ssoSilent","payload","MsalAuthenticationTemplate","loadingComponent","LoadingComponent","errorComponent","ErrorComponent","msalAuthResult","withMsal","Component","ComponentWithMsal","props","msal","msalContext","componentName","displayName"],"mappings":"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"}