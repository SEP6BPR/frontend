{"ast":null,"code":"/*! @azure/msal-browser v2.19.0 2021-11-02 */\n'use strict';\n\nimport { BrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar stubbedPublicClientApplication = {\n  acquireTokenPopup: function acquireTokenPopup() {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  acquireTokenRedirect: function acquireTokenRedirect() {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  acquireTokenSilent: function acquireTokenSilent() {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  getAllAccounts: function getAllAccounts() {\n    return [];\n  },\n  getAccountByHomeId: function getAccountByHomeId() {\n    return null;\n  },\n  getAccountByUsername: function getAccountByUsername() {\n    return null;\n  },\n  getAccountByLocalId: function getAccountByLocalId() {\n    return null;\n  },\n  handleRedirectPromise: function handleRedirectPromise() {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  loginPopup: function loginPopup() {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  loginRedirect: function loginRedirect() {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  logout: function logout() {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  logoutRedirect: function logoutRedirect() {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  logoutPopup: function logoutPopup() {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  ssoSilent: function ssoSilent() {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  addEventCallback: function addEventCallback() {\n    return null;\n  },\n  removeEventCallback: function removeEventCallback() {\n    return;\n  },\n  enableAccountStorageEvents: function enableAccountStorageEvents() {\n    return;\n  },\n  disableAccountStorageEvents: function disableAccountStorageEvents() {\n    return;\n  },\n  getTokenCache: function getTokenCache() {\n    throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();\n  },\n  getLogger: function getLogger() {\n    throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();\n  },\n  setLogger: function setLogger() {\n    return;\n  },\n  setActiveAccount: function setActiveAccount() {\n    return;\n  },\n  getActiveAccount: function getActiveAccount() {\n    return null;\n  },\n  initializeWrapperLibrary: function initializeWrapperLibrary() {\n    return;\n  },\n  setNavigationClient: function setNavigationClient() {\n    return;\n  },\n  getConfiguration: function getConfiguration() {\n    throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();\n  }\n};\nexport { stubbedPublicClientApplication };","map":{"version":3,"sources":["../../src/app/IPublicClientApplication.ts"],"names":[],"mappings":";;;;AAAA;;;;;IA+Ca,8BAA8B,GAA6B;AACpE,EAAA,iBAAiB,EAAE,6BAAA;AACf,WAAO,OAAO,CAAC,MAAR,CAAe,6BAA6B,CAAC,gCAA9B,EAAf,CAAP;AACH,GAHmE;AAIpE,EAAA,oBAAoB,EAAE,gCAAA;AAClB,WAAO,OAAO,CAAC,MAAR,CAAe,6BAA6B,CAAC,gCAA9B,EAAf,CAAP;AACH,GANmE;AAOpE,EAAA,kBAAkB,EAAE,8BAAA;AAChB,WAAO,OAAO,CAAC,MAAR,CAAe,6BAA6B,CAAC,gCAA9B,EAAf,CAAP;AACH,GATmE;AAUpE,EAAA,cAAc,EAAE,0BAAA;AACZ,WAAO,EAAP;AACH,GAZmE;AAapE,EAAA,kBAAkB,EAAE,8BAAA;AAChB,WAAO,IAAP;AACH,GAfmE;AAgBpE,EAAA,oBAAoB,EAAE,gCAAA;AAClB,WAAO,IAAP;AACH,GAlBmE;AAmBpE,EAAA,mBAAmB,EAAE,+BAAA;AACjB,WAAO,IAAP;AACH,GArBmE;AAsBpE,EAAA,qBAAqB,EAAE,iCAAA;AACnB,WAAO,OAAO,CAAC,MAAR,CAAe,6BAA6B,CAAC,gCAA9B,EAAf,CAAP;AACH,GAxBmE;AAyBpE,EAAA,UAAU,EAAE,sBAAA;AACR,WAAO,OAAO,CAAC,MAAR,CAAe,6BAA6B,CAAC,gCAA9B,EAAf,CAAP;AACH,GA3BmE;AA4BpE,EAAA,aAAa,EAAE,yBAAA;AACX,WAAO,OAAO,CAAC,MAAR,CAAe,6BAA6B,CAAC,gCAA9B,EAAf,CAAP;AACH,GA9BmE;AA+BpE,EAAA,MAAM,EAAE,kBAAA;AACJ,WAAO,OAAO,CAAC,MAAR,CAAe,6BAA6B,CAAC,gCAA9B,EAAf,CAAP;AACH,GAjCmE;AAkCpE,EAAA,cAAc,EAAE,0BAAA;AACZ,WAAO,OAAO,CAAC,MAAR,CAAe,6BAA6B,CAAC,gCAA9B,EAAf,CAAP;AACH,GApCmE;AAqCpE,EAAA,WAAW,EAAE,uBAAA;AACT,WAAO,OAAO,CAAC,MAAR,CAAe,6BAA6B,CAAC,gCAA9B,EAAf,CAAP;AACH,GAvCmE;AAwCpE,EAAA,SAAS,EAAE,qBAAA;AACP,WAAO,OAAO,CAAC,MAAR,CAAe,6BAA6B,CAAC,gCAA9B,EAAf,CAAP;AACH,GA1CmE;AA2CpE,EAAA,gBAAgB,EAAE,4BAAA;AACd,WAAO,IAAP;AACH,GA7CmE;AA8CpE,EAAA,mBAAmB,EAAE,+BAAA;AACjB;AACH,GAhDmE;AAiDpE,EAAA,0BAA0B,EAAE,sCAAA;AACxB;AACH,GAnDmE;AAoDpE,EAAA,2BAA2B,EAAE,uCAAA;AACzB;AACH,GAtDmE;AAuDpE,EAAA,aAAa,EAAE,yBAAA;AACX,UAAM,6BAA6B,CAAC,gCAA9B,EAAN;AACH,GAzDmE;AA0DpE,EAAA,SAAS,EAAE,qBAAA;AACP,UAAM,6BAA6B,CAAC,gCAA9B,EAAN;AACH,GA5DmE;AA6DpE,EAAA,SAAS,EAAE,qBAAA;AACP;AACH,GA/DmE;AAgEpE,EAAA,gBAAgB,EAAE,4BAAA;AACd;AACH,GAlEmE;AAmEpE,EAAA,gBAAgB,EAAE,4BAAA;AACd,WAAO,IAAP;AACH,GArEmE;AAsEpE,EAAA,wBAAwB,EAAE,oCAAA;AACtB;AACH,GAxEmE;AAyEpE,EAAA,mBAAmB,EAAE,+BAAA;AACjB;AACH,GA3EmE;AA4EpE,EAAA,gBAAgB,EAAE,4BAAA;AACd,UAAM,6BAA6B,CAAC,gCAA9B,EAAN;AACH;AA9EmE,C","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthenticationResult, AccountInfo, Logger } from \"@azure/msal-common\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { BrowserConfigurationAuthError } from \"../error/BrowserConfigurationAuthError\";\nimport { WrapperSKU } from \"../utils/BrowserConstants\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\n\nexport interface IPublicClientApplication {\n    acquireTokenPopup(request: PopupRequest): Promise<AuthenticationResult>;\n    acquireTokenRedirect(request: RedirectRequest): Promise<void>;\n    acquireTokenSilent(silentRequest: SilentRequest): Promise<AuthenticationResult>;\n    addEventCallback(callback: Function): string | null;\n    removeEventCallback(callbackId: string): void;\n    enableAccountStorageEvents(): void;\n    disableAccountStorageEvents(): void;\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null;\n    getAccountByLocalId(localId: string): AccountInfo | null;\n    getAccountByUsername(userName: string): AccountInfo | null;\n    getAllAccounts(): AccountInfo[];\n    handleRedirectPromise(hash?: string): Promise<AuthenticationResult | null>;\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult>;\n    loginRedirect(request?: RedirectRequest): Promise<void>;\n    logout(logoutRequest?: EndSessionRequest): Promise<void>;\n    logoutRedirect(logoutRequest?: EndSessionRequest): Promise<void>;\n    logoutPopup(logoutRequest?: EndSessionPopupRequest): Promise<void>;\n    ssoSilent(request: SsoSilentRequest): Promise<AuthenticationResult>;\n    getTokenCache(): ITokenCache;\n    getLogger(): Logger;\n    setLogger(logger: Logger): void;\n    setActiveAccount(account: AccountInfo | null): void;\n    getActiveAccount(): AccountInfo | null;\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void;\n    setNavigationClient(navigationClient: INavigationClient): void;\n    getConfiguration(): BrowserConfiguration;\n}\n\nexport const stubbedPublicClientApplication: IPublicClientApplication = {\n    acquireTokenPopup: () => {\n        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n    },\n    acquireTokenRedirect: () => {\t\n        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\t\n    },\t\n    acquireTokenSilent: () => {\t\n        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\t\n    },\t\n    getAllAccounts: () => {\n        return [];\t\n    },\t\n    getAccountByHomeId: () => {\n        return null;\n    },\n    getAccountByUsername: () => {\t\n        return null;\t\n    },\t\n    getAccountByLocalId: () => {\n        return null;\n    },\n    handleRedirectPromise: () => {\t\n        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\t\n    },\t\n    loginPopup: () => {\t\n        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\t\n    },\t\n    loginRedirect: () => {\t\n        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\t\n    },\t\n    logout: () => {\t\n        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\t\n    },\t\n    logoutRedirect: () => {\t\n        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\t\n    },\n    logoutPopup: () => {\t\n        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\t\n    },\n    ssoSilent: () => {\t\n        return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\t\n    },\n    addEventCallback: () => {\n        return null;\n    },\n    removeEventCallback: () => {\n        return;\n    },\n    enableAccountStorageEvents: () => {\n        return;\n    },\n    disableAccountStorageEvents: () => {\n        return;\n    },\n    getTokenCache: () => {\n        throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();\n    },\n    getLogger: () => {\n        throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();\n    },\n    setLogger: () => {\n        return;\n    },\n    setActiveAccount: () => {\n        return;\n    },\n    getActiveAccount: () => {\n        return null;\n    },\n    initializeWrapperLibrary: () => {\n        return;\n    },\n    setNavigationClient: () => {\n        return;\n    },\n    getConfiguration: () => {\n        throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();\n    }\n};\n"]},"metadata":{},"sourceType":"module"}